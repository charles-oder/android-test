apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'pmd'

check.dependsOn 'pmd'

task pmd(type: Pmd) {

    description "Generate PMD reports for this build"

    ignoreFailures true    // Ignores failing build on warning. If not set build will fail on warning.

    ruleSets = [
            "java-basic",
            "java-braces",
            "java-naming",
            "java-android",
            "java-codesize",
            "java-design",
            "java-finalizers",
            "java-junit",
            "java-optimizations",
            "java-strictexception",
            "java-strings",
            "java-unusedcode"
    ]

    source 'src'          // Specify the source code. The script should be applied to
    include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
    exclude '**/gen/**'   // include / exclude folders and files.

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

apply plugin: 'findbugs'

check.dependsOn 'findbugs'

task findbugs(type: FindBugs) {

    description 'Generate FindBugs reports for this build'

    ignoreFailures true

    //Higher levels increase precision and find more bugs at the expense of running time and memory consumption.
    effort = 'max'
    //The priority threshold for reporting bugs. If set to {@code low}, all bugs are reported.
    reportLevel = 'low'

    //Define path to classes
    classes = fileTree("${project.rootDir}/app/build/intermediates/classes") //path to compiled class files

    source 'src'          // Specify the source code. The script should be applied to
    include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
    exclude '**/gen/**'   // include / exclude folders and files.

    //Define exclude config file
    excludeFilter = file("${rootProject.projectDir}/gradleConfigs/findbugs_exlude.xml")

    //IMPORTANT: FINDBUGS CAN ONLY GENERATE 1 REPORT. XML OR HTML!! AND PATH MUST BE DEFINED!!
    reports {
        xml.enabled = false
        html.enabled = true
        xml.destination = "$project.buildDir/reports/findbugs/findbugs-output.xml"
        html.destination = "$project.buildDir/reports/findbugs/findbugs-output.html"
    }

    classpath = files()
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "us.oder.charles.androidexample"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

// run ./gradlew clean testDebugUnitTest testCoverageReport

task testCoverageReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    // workaround for Jacoco bug https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac
    onlyIf = {
        true
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }
}